/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_EXAMPLE_PB_H_INCLUDED
#define PB_EXAMPLE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Sub { 
    int32_t test; 
} Sub;

typedef struct _Example { 
    int32_t numbers; /* [(nanopb).max_count = 5, (nanopb).fixed_count = true]; */
    int32_t val2; 
    float val3; 
    bool has_sub;
    Sub sub; 
} Example;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Sub_init_default                         {0}
#define Example_init_default                     {0, 0, 0, false, Sub_init_default}
#define Sub_init_zero                            {0}
#define Example_init_zero                        {0, 0, 0, false, Sub_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Sub_test_tag                             1
#define Example_numbers_tag                      1
#define Example_val2_tag                         2
#define Example_val3_tag                         3
#define Example_sub_tag                          4

/* Struct field encoding specification for nanopb */
#define Sub_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    test,              1)
#define Sub_CALLBACK NULL
#define Sub_DEFAULT NULL

#define Example_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    numbers,           1) \
X(a, STATIC,   SINGULAR, INT32,    val2,              2) \
X(a, STATIC,   SINGULAR, FLOAT,    val3,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sub,               4)
#define Example_CALLBACK NULL
#define Example_DEFAULT NULL
#define Example_sub_MSGTYPE Sub

extern const pb_msgdesc_t Sub_msg;
extern const pb_msgdesc_t Example_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Sub_fields &Sub_msg
#define Example_fields &Example_msg

/* Maximum encoded size of messages (where known) */
#define Example_size                             40
#define Sub_size                                 11

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
