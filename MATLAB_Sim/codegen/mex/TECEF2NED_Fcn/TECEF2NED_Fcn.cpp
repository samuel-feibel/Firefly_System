//
//  Academic License - for use in teaching, academic research, and meeting
//  course requirements at degree granting institutions only.  Not for
//  government, commercial, or other organizational use.
//
//  TECEF2NED_Fcn.cpp
//
//  Code generation for function 'TECEF2NED_Fcn'
//


// Include files
#include "TECEF2NED_Fcn.h"
#include "mwmathutil.h"
#include "rt_nonfinite.h"

// Variable Definitions
static emlrtRSInfo g_emlrtRSI = { 21,  // lineNo
  "TECEF2NED_Fcn",                     // fcnName
  "/Users/samuelfeibel/Documents/Projects/Firefly System/MATLAB_Sim/TECEF2NED_Fcn.m"// pathName 
};

static emlrtRSInfo i_emlrtRSI = { 28,  // lineNo
  "TECEF2NED_Fcn",                     // fcnName
  "/Users/samuelfeibel/Documents/Projects/Firefly System/MATLAB_Sim/TECEF2NED_Fcn.m"// pathName 
};

static emlrtRTEInfo emlrtRTEI = { 13,  // lineNo
  9,                                   // colNo
  "sqrt",                              // fName
  "/Applications/MATLAB_R2020a.app/toolbox/eml/lib/matlab/elfun/sqrt.m"// pName
};

// Function Definitions
void TECEF2NED_Fcn(const emlrtStack *sp, const real_T in1[3], real_T NED_C_ECEF
                   [9])
{
  real_T a;
  real_T t15;
  real_T b_a;
  real_T t13;
  real_T t12;
  emlrtStack st;
  st.prev = sp;
  st.tls = sp->tls;

  // TECEF2NED_FCN
  //     NED_C_ECEF = TECEF2NED_FCN(IN1)
  //     This function was generated by the Symbolic Math Toolbox version 8.5.
  //     11-Jun-2021 19:40:44
  a = muDoubleScalarAbs(in1[0]);
  t15 = muDoubleScalarAbs(in1[1]);
  b_a = muDoubleScalarAbs(in1[2]);
  t13 = in1[0] * in1[0] + in1[1] * in1[1];
  st.site = &g_emlrtRSI;
  if (t13 < 0.0) {
    emlrtErrorWithMessageIdR2018a(&st, &emlrtRTEI,
      "Coder:toolbox:ElFunDomainError", "Coder:toolbox:ElFunDomainError", 3, 4,
      4, "sqrt");
  }

  t13 = muDoubleScalarSqrt(t13);
  t12 = 1.0 / t13;
  t13 = (a * a + t15 * t15) + b_a * b_a;
  t15 = 1.0 / muDoubleScalarSqrt(t13);
  t13 = -(in1[2] * in1[2] * (1.0 / t13));
  st.site = &i_emlrtRSI;
  if (t13 + 1.0 < 0.0) {
    emlrtErrorWithMessageIdR2018a(&st, &emlrtRTEI,
      "Coder:toolbox:ElFunDomainError", "Coder:toolbox:ElFunDomainError", 3, 4,
      4, "sqrt");
  }

  t13 = muDoubleScalarSqrt(t13 + 1.0);
  NED_C_ECEF[0] = -in1[0] * in1[2] * t12 * t15;
  a = -in1[1] * t12;
  NED_C_ECEF[1] = a;
  NED_C_ECEF[2] = -in1[0] * t12 * t13;
  NED_C_ECEF[3] = -in1[1] * in1[2] * t12 * t15;
  NED_C_ECEF[4] = in1[0] * t12;
  NED_C_ECEF[5] = a * t13;
  NED_C_ECEF[6] = t13;
  NED_C_ECEF[7] = 0.0;
  NED_C_ECEF[8] = -in1[2] * t15;
}

// End of code generation (TECEF2NED_Fcn.cpp)
