//
//  Academic License - for use in teaching, academic research, and meeting
//  course requirements at degree granting institutions only.  Not for
//  government, commercial, or other organizational use.
//
//  LatLonAlt2NED_Fcn.cpp
//
//  Code generation for function 'LatLonAlt2NED_Fcn'
//


// Include files
#include "LatLonAlt2NED_Fcn.h"
#include "mwmathutil.h"
#include "rt_nonfinite.h"

// Variable Definitions
static emlrtRSInfo d_emlrtRSI = { 33,  // lineNo
  "LatLonAlt2NED_Fcn",                 // fcnName
  "/Users/samuelfeibel/Documents/Projects/Firefly System/MATLAB_Sim/LatLonAlt2NED_Fcn.m"// pathName 
};

static emlrtRTEInfo emlrtRTEI = { 13,  // lineNo
  9,                                   // colNo
  "sqrt",                              // fName
  "/Applications/MATLAB_R2020a.app/toolbox/eml/lib/matlab/elfun/sqrt.m"// pName
};

// Function Definitions
void LatLonAlt2NED_Fcn(const emlrtStack *sp, real_T Lat, real_T Lon, real_T Alt,
  const real_T in4[3], const real_T in5[9], real_T r_NED[3])
{
  real_T t4;
  real_T t7;
  real_T t9;
  real_T t17;
  real_T t15;
  real_T t22;
  emlrtStack st;
  st.prev = sp;
  st.tls = sp->tls;

  // LATLONALT2NED_FCN
  //     R_NED = LATLONALT2NED_FCN(LAT,LON,ALT,IN4,IN5)
  //     This function was generated by the Symbolic Math Toolbox version 8.5.
  //     10-Jun-2021 23:09:47
  t4 = muDoubleScalarCos(Lat * 3.1415926535897931 / 180.0);
  t7 = Lon * 9.869604401089358 / 32400.0;
  t9 = muDoubleScalarSin(Lat * 9.869604401089358 / 32400.0);
  t17 = t4 * t4 * 4.0680631590769E+13 + t9 * t9 * 4.0408299984659156E+13;
  st.site = &d_emlrtRSI;
  if (t17 < 0.0) {
    emlrtErrorWithMessageIdR2018a(&st, &emlrtRTEI,
      "Coder:toolbox:ElFunDomainError", "Coder:toolbox:ElFunDomainError", 3, 4,
      4, "sqrt");
  }

  t17 = muDoubleScalarSqrt(t17);
  t15 = 1.0 / t17;
  t17 = Alt + t15 * 4.0680631590769E+13;
  t22 = in4[0] + -(t4 * muDoubleScalarCos(t7) * t17);
  t4 = in4[1] + -(t4 * muDoubleScalarSin(t7) * t17);
  t17 = in4[2] + -(t9 * (Alt + t15 * 4.0408299984659148E+13));
  r_NED[0] = (-in5[0] * t22 - in5[3] * t4) - in5[6] * t17;
  r_NED[1] = (-in5[1] * t22 - in5[4] * t4) - in5[7] * t17;
  r_NED[2] = (-in5[2] * t22 - in5[5] * t4) - in5[8] * t17;
}

// End of code generation (LatLonAlt2NED_Fcn.cpp)
