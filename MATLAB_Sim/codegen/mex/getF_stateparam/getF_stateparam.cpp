//
//  Academic License - for use in teaching, academic research, and meeting
//  course requirements at degree granting institutions only.  Not for
//  government, commercial, or other organizational use.
//
//  getF_stateparam.cpp
//
//  Code generation for function 'getF_stateparam'
//


// Include files
#include "getF_stateparam.h"
#include "rt_nonfinite.h"
#include <string.h>

// Function Definitions
void getF_stateparam(const emlrtStack *, const real_T Xk[10], const real_T
                     cntrl[6], real_T delt, real_T F[100])
{
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t5;
  real_T t6;
  real_T t7;
  real_T t8;
  real_T t9;
  real_T t10;
  real_T t11;
  real_T t13;
  real_T t14;
  real_T t15;
  real_T t16;
  real_T t18;
  real_T t19;
  real_T t20;
  real_T t21;
  real_T t23;
  real_T t27;
  real_T t28;
  real_T t29;
  real_T t36;
  real_T t37;
  real_T t39;
  int8_T b_I[100];
  int32_T k;
  real_T dv[10];
  real_T dv1[10];
  real_T dv2[10];
  real_T b_t2[10];
  real_T b_t6[10];
  real_T b_t7[10];
  real_T t41[10];
  real_T t42[10];
  real_T b_t14[10];
  real_T t44[10];

  // F_JAC_FCN
  //     F = F_JAC_FCN(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 8.5.
  //     23-Jul-2021 11:41:29
  t2 = Xk[6] * Xk[6];
  t3 = Xk[7] * Xk[7];
  t4 = Xk[8] * Xk[8];
  t5 = Xk[9] * Xk[9];
  t6 = Xk[6] * Xk[7] * 2.0;
  t7 = Xk[6] * Xk[8] * 2.0;
  t8 = Xk[6] * Xk[9] * 2.0;
  t9 = Xk[7] * Xk[8] * 2.0;
  t10 = Xk[7] * Xk[9] * 2.0;
  t11 = Xk[8] * Xk[9] * 2.0;
  t13 = Xk[7] * Xk[3] * 2.0;
  t14 = Xk[8] * Xk[3] * 2.0;
  t15 = Xk[9] * Xk[3] * 2.0;
  t16 = Xk[6] * Xk[4] * 2.0;
  t18 = Xk[8] * Xk[4] * 2.0;
  t19 = Xk[9] * Xk[4] * 2.0;
  t20 = Xk[6] * Xk[5] * 2.0;
  t21 = Xk[7] * Xk[5] * 2.0;
  t23 = Xk[9] * Xk[5] * 2.0;
  t27 = cntrl[3] / 2.0;
  t28 = cntrl[4] / 2.0;
  t29 = cntrl[5] / 2.0;
  t36 = Xk[6] * 19.6;
  t37 = Xk[7] * 19.6;
  t39 = Xk[9] * 19.6;
  memset(&b_I[0], 0, 100U * sizeof(int8_T));
  for (k = 0; k < 10; k++) {
    b_I[k + 10 * k] = 1;
  }

  real_T t41_tmp;
  real_T b_t41_tmp;
  dv[0] = 0.0 * delt;
  dv[1] = 0.0 * delt;
  dv[2] = 0.0 * delt;
  dv[3] = 0.0 * delt;
  dv[4] = 0.0 * delt;
  dv[5] = 0.0 * delt;
  dv[6] = 0.0 * delt;
  dv[7] = 0.0 * delt;
  dv[8] = 0.0 * delt;
  dv[9] = 0.0 * delt;
  dv1[0] = 0.0 * delt;
  dv1[1] = 0.0 * delt;
  dv1[2] = 0.0 * delt;
  dv1[3] = 0.0 * delt;
  dv1[4] = 0.0 * delt;
  dv1[5] = 0.0 * delt;
  dv1[6] = 0.0 * delt;
  dv1[7] = 0.0 * delt;
  dv1[8] = 0.0 * delt;
  dv1[9] = 0.0 * delt;
  dv2[0] = 0.0 * delt;
  dv2[1] = 0.0 * delt;
  dv2[2] = 0.0 * delt;
  dv2[3] = 0.0 * delt;
  dv2[4] = 0.0 * delt;
  dv2[5] = 0.0 * delt;
  dv2[6] = 0.0 * delt;
  dv2[7] = 0.0 * delt;
  dv2[8] = 0.0 * delt;
  dv2[9] = 0.0 * delt;
  b_t2[0] = (((t2 + t5) + -t3) + -t4) * delt;
  b_t2[1] = (t6 + t11) * delt;
  b_t2[2] = (t7 - t10) * delt;
  b_t2[3] = 0.0 * delt;
  b_t2[4] = 0.0 * delt;
  b_t2[5] = 0.0 * delt;
  b_t2[6] = 0.0 * delt;
  b_t2[7] = 0.0 * delt;
  b_t2[8] = 0.0 * delt;
  b_t2[9] = 0.0 * delt;
  b_t6[0] = (t6 - t11) * delt;
  b_t6[1] = (((t3 + t5) + -t2) + -t4) * delt;
  b_t6[2] = (t8 + t9) * delt;
  b_t6[3] = 0.0 * delt;
  b_t6[4] = 0.0 * delt;
  b_t6[5] = 0.0 * delt;
  b_t6[6] = 0.0 * delt;
  b_t6[7] = 0.0 * delt;
  b_t6[8] = 0.0 * delt;
  b_t6[9] = 0.0 * delt;
  b_t7[0] = (t7 + t10) * delt;
  b_t7[1] = (-t8 + t9) * delt;
  b_t7[2] = (((t4 + t5) + -t2) + -t3) * delt;
  b_t7[3] = 0.0 * delt;
  b_t7[4] = 0.0 * delt;
  b_t7[5] = 0.0 * delt;
  b_t7[6] = 0.0 * delt;
  b_t7[7] = 0.0 * delt;
  b_t7[8] = 0.0 * delt;
  b_t7[9] = 0.0 * delt;
  t8 = ((Xk[6] * Xk[3] * 2.0 + Xk[7] * Xk[4] * 2.0) + Xk[8] * Xk[5] * 2.0) *
    delt;
  t41[0] = t8;
  t41[1] = ((t13 - t16) - t23) * delt;
  t10 = ((t14 + t19) + -t20) * delt;
  t41[2] = t10;
  t9 = Xk[8] * 19.6 * delt;
  t41[3] = t9;
  t11 = t39 * delt;
  t41[4] = t11;
  t41[5] = -t36 * delt;
  t41[6] = 0.0 * delt;
  t41_tmp = -t29 * delt;
  t41[7] = t41_tmp;
  b_t41_tmp = t28 * delt;
  t41[8] = b_t41_tmp;
  t2 = -t27 * delt;
  t41[9] = t2;
  t7 = ((t16 + t23) + -t13) * delt;
  t42[0] = t7;
  t42[1] = t8;
  t42[2] = ((-t15 + t18) - t21) * delt;
  t42[3] = -t39 * delt;
  t42[4] = t9;
  t6 = -t37 * delt;
  t42[5] = t6;
  t5 = t29 * delt;
  t42[6] = t5;
  t42[7] = 0.0 * delt;
  t42[8] = t2;
  t4 = -t28 * delt;
  t42[9] = t4;
  b_t14[0] = ((-t14 - t19) + t20) * delt;
  t3 = ((t15 + t21) + -t18) * delt;
  b_t14[1] = t3;
  b_t14[2] = t8;
  t2 = t36 * delt;
  b_t14[3] = t2;
  b_t14[4] = t37 * delt;
  b_t14[5] = t9;
  b_t14[6] = t4;
  t4 = t27 * delt;
  b_t14[7] = t4;
  b_t14[8] = 0.0 * delt;
  b_t14[9] = t41_tmp;
  t44[0] = t3;
  t44[1] = t10;
  t44[2] = t7;
  t44[3] = t6;
  t44[4] = t2;
  t44[5] = t11;
  t44[6] = t4;
  t44[7] = b_t41_tmp;
  t44[8] = t5;
  t44[9] = 0.0 * delt;
  for (k = 0; k < 10; k++) {
    F[k] = static_cast<real_T>(b_I[k]) + dv[k];
    F[k + 10] = static_cast<real_T>(b_I[k + 10]) + dv1[k];
    F[k + 20] = static_cast<real_T>(b_I[k + 20]) + dv2[k];
    F[k + 30] = static_cast<real_T>(b_I[k + 30]) + b_t2[k];
    F[k + 40] = static_cast<real_T>(b_I[k + 40]) + b_t6[k];
    F[k + 50] = static_cast<real_T>(b_I[k + 50]) + b_t7[k];
    F[k + 60] = static_cast<real_T>(b_I[k + 60]) + t41[k];
    F[k + 70] = static_cast<real_T>(b_I[k + 70]) + t42[k];
    F[k + 80] = static_cast<real_T>(b_I[k + 80]) + b_t14[k];
    F[k + 90] = static_cast<real_T>(b_I[k + 90]) + t44[k];
  }
}

// End of code generation (getF_stateparam.cpp)
